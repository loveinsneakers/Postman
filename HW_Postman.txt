http://162.55.220.72:5005/first
1. Отправить запрос.
2. Статус код 200

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. Проверить, что в body приходит правильный string.

pm.test("Body matches string", function () {
    pm.expect(pm.response.text()).to.include("This is the first responce from server!ss");
});

4. Проверить, что name в ответе равно name s request (name вбить руками.)

let req_name = req_f.name
let resp_name = resp_f.name

pm.test("Check_name_byhands", function () {
       pm.expect('Lyubov').to.eql
(resp_name);
});

5. Проверить, что age в ответе равно age s request (age вбить руками.)

let req_age = +req_f.age
let resp_age = +resp_f.age

console.log("resp_age = " + resp_f.age)

pm.test("Check_age", function () {
       pm.expect(32).to.eql
(req_age);
});

6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)

let req_salary = +req_f.salary
let resp_salary = resp_f.salary

console.log("resp_salary = " + resp_f.salary)

pm.test("Check_salary", function () {
       pm.expect(2000).to.eql
(req_salary);
});

7. Спарсить request.

let req_f = request.data
console.log(req_f)

8. Проверить, что name в ответе равно name s request (name забрать из request.)

pm.test("Check_name_req", function () {
       pm.expect(resp_name).to.eql
(req_name);
});

9. Проверить, что age в ответе равно age s request (age забрать из request.)

pm.test("Check_age_req", function () {
       pm.expect(resp_age).to.eql
(req_age);
});

10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)

pm.test("Check_salary_req", function () {
       pm.expect(resp_salary).to.eql
(req_salary);
});

11. Вывести в консоль параметр family из response.

let resp_family = resp_f.family
console.log(resp_family)

12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)

let resp_salary_1_5_year = +resp_f.family.u_salary_1_5_year

console.log("------- = " + resp_salary_1_5_year)

pm.test("Check_salary_u_1_5_year", function () {
    pm.expect(resp_salary_1_5_year).to.eql(req_salary*4);
});

http://162.55.220.72:5005/object_info_3
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
4. Спарсить request.

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

let req_p = pm.request.url.query.toObject()
console.log(req_p)

let resp_p = pm.response.json ();
console.log('resp_p:', resp_p)

5. Проверить, что name в ответе равно name s request (name забрать из request.)

let req_name_get = pm.request.url.query.get("name")
let resp_name = resp_p.name

console.log("req_name_get =" + req_name_get)

pm.test("Check_name", function () {
        pm.expect(resp_name).to.eql(req_name_get);
});

6. Проверить, что age в ответе равно age s request (age забрать из request.)

let req_p_age = pm.request.url.query.get("age")
let resp_age = resp_p.age

pm.test("Check_age", function () {
        pm.expect(resp_age).to.eql(req_p_age);
});

7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)

let req_p_salary = pm.request.url.query.get("salary")
let resp_salary = +resp_p.salary

console.log("req_p_salary = " + req_p_salary)
console.log("resp_salary = " + resp_salary)

pm.test("Check_salary", function () {
        pm.expect(+resp_salary).to.eql(+req_p_salary);
});

8. Вывести в консоль параметр family из response.

let resp_family = resp_p.family
console.log(resp_family)

9. Проверить, что у параметра dog есть параметры name.

let dog_name = resp_p.family.pets.dog

console.log(dog_name)

pm.test("Dog_have_name", function () {
        pm.expect(dog_name).to.have.property("name");
});

или

pm.test("dog_have_name", function () {
pm.expect(resp_p.family.pets.dog).to.have.property("name");
});

10. Проверить, что у параметра dog есть параметры age.

let dog_age = resp_p.family.pets.dog
console.log(dog_name)

pm.test("dog_have_age", function () {
pm.expect(resp_p.family.pets.dog).to.have.property("age");
});

11. Проверить, что параметр name имеет значение Luky.

let dog_name_Luky = resp_p.family.pets.dog.name

pm.test("dog_have_name_Luky", function () {
pm.expect(dog_name_Luky).to.eql("Luky");
});

12. Проверить, что параметр age имеет значение 4.

pm.test("Age_4", function () {
pm.expect(resp_p.family.pets.dog.age).to.eql(4);
});

http://162.55.220.72:5005/object_info_4
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
4. Спарсить request.

let req_p = pm.request.url.query.toObject()
console.log(req_p)
let resp_p = pm.response.json ();
console.log(resp_p)

5. Проверить, что name в ответе равно name s request (name забрать из request.)

let req_name = pm.request.url.query.get("name")
let resp_name = resp_p.name
pm.test("Check_name", function () {
        pm.expect(resp_name).to.eql(req_name);
});

6. Проверить, что age в ответе равно age из request (age забрать из request.)

let req_age = pm.request.url.query.get("age")
let resp_age = +resp_p.age

pm.test("Check_age", function () {
        pm.expect(+resp_age).to.eql(+req_age);
});

7. Вывести в консоль параметр salary из request.

let req_salary = pm.request.url.query.get("salary")
console.log("req_salary = " + req_salary)

8. Вывести в консоль параметр salary из response.

let resp_salary = resp_p.salary
console.log("resp_salary =" + resp_p.salary)

9. Вывести в консоль 0-й элемент параметра salary из response.

console.log("resp_salary =" + resp_p.salary [0])

10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.

console.log("resp_salary =" + resp_p.salary [1])

11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.

console.log("resp_salary =" + resp_p.salary [2])

12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)

let resp_salary = +resp_p.salary

pm.test("Check_salary_0", function () {
    pm.expect(+req_salary).to.eql(+resp_p.salary[0]);
});

13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)

pm.test("Check_salary_1", function () {
    pm.expect(+req_salary*2).to.eql(+resp_p.salary[1]);
});

14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)

pm.test("Check_salary_2", function () {
    pm.expect(+req_salary*3).to.eql(+resp_p.salary[2]);
});

15. Создать в окружении переменную name

Environments - key - name

16. Создать в окружении переменную age

Environments - key - age

17. Создать в окружении переменную salary

Environments - key - salary

18. Передать в окружение переменную name

pm.environment.set("name", "Lyubov");

19. Передать в окружение переменную age

pm.environment.set("age", "32");

20. Передать в окружение переменную salary

pm.environment.set("salary", "2000");

21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.

let resp_p = pm.response.json ();
let arr  = resp_p.salary

for (let i = 0; i < arr.length; i++) {

console.log("Elements_salary = " + i + ": " + arr[i])

}
for (let i in resp_p.salary) {

console.log("Elements_salary = " + i + ": " + resp_p.salary[i])

}

http://162.55.220.72:5005/user_info_2
1. Вставить параметр salary из окружения в request
2. Вставить параметр age из окружения в age
3. Вставить параметр name из окружения в name
4. Отправить запрос.
5. Статус код 200
6. Спарсить response body в json.
7. Спарсить request.

Form.data - Value
{{name}}
{{age}}
{{salary}}

let req_f = request.data
let resp_f = pm.response.json();

console.log(req_f)
console.log(resp_f)

8. Проверить, что json response имеет параметр start_qa_salary

let resp_f_start_salary = +resp_f.person

pm.test("Check_start_salary", function () {
       pm.expect(+resp_f_start_salary).to.eql(+"start_qa_salary");
});

9. Проверить, что json response имеет параметр qa_salary_after_6_months

let resp_f_after_6 = +resp_f.person
pm.test("Check_after_6", function () {
       pm.expect(+resp_f_after_6).to.eql(+"qa_salary_after_6_months");
});

10. Проверить, что json response имеет параметр qa_salary_after_12_months

let resp_f_after_12 = +resp_f.person
pm.test("Check_after_12", function () {
       pm.expect(+resp_f_after_12).to.eql(+"qa_salary_after_12_months");
});

11. Проверить, что json response имеет параметр qa_salary_after_1.5_year

let resp_f_after_1_5 = +resp_f.person
pm.test("Check_after_12", function () {
       pm.expect(+resp_f_after_1_5).to.eql(+"qa_salary_after_1.5_year");
});

12. Проверить, что json response имеет параметр qa_salary_after_3.5_years

let resp_f_after_3_5 = +resp_f.person
pm.test("Check_after_3_5", function () {
       pm.expect(+resp_f_after_3_5).to.eql(+"qa_salary_after_3.5_years");
});

13. Проверить, что json response имеет параметр person

pm.test("Json_have_person", function () {
       pm.expect(resp_f).to.have.property("person");
});

14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)

let start_qa_salary = +resp_f.person
pm.test("start_salary_request", function () {
       pm.expect(+start_qa_salary).to.eql(+"req_f");
});

15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)

let salary_after_6x2 = +resp_f.person
pm.test("salary_after_6x2", function () {
       pm.expect(+salary_after_6x2*2).to.eql(+"req_f");
});


16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)

let salary_after_12x2_7 = +resp_f.person
pm.test("salary_after_12x2_7", function () {
       pm.expect(+salary_after_12x2_7*2.7).to.eql(+"req_f");
});

17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)

let after_1_5x3_3 = +resp_f.person
pm.test("salary_after_1_5x3_3", function () {
       pm.expect(+after_1_5x3_3*3.3).to.eql(+"req_f");
});

18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)

let after_3_5x3_8 = +resp_f.person
pm.test("salary_after_3_5x3_8", function () {
       pm.expect(+after_3_5x3_8*3.8).to.eql(+"req_f");
});

19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)

let u_name_salary = resp_f.person.u_name

pm.test("Check_u_name", function () {
       pm.expect(+u_name_salary[0]).to.eql(+"req_f");
});

20. Проверить, что что параметр u_age равен age из request (age забрать из request.)

let u_age = resp_f.u_age
let req_age = req_f.age

pm.test("Check_u_name", function () {
       pm.expect(+u_age).to.eql(+"req_f.u_age");
});

21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)

let u_5_salary = resp_f.u_salary_5_years

pm.test("Check_u_5_salary", function () {
       pm.expect(+u_5_salary*4.2).to.eql(+"req_f.u_salary_5_years");
});

22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.

let resp_p = pm.response.json ();

for (let i in resp_p.person){
    console.log (resp_p.person[i])
}
